{\rtf1\ansi\ansicpg1252\deff0\nouicompat\deflang1031{\fonttbl{\f0\fnil\fcharset0 Calibri;}{\f1\fnil\fcharset2 Symbol;}}
{\*\generator Riched20 10.0.19041}\viewkind4\uc1 
\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li720\sa200\sl276\slmult1\qc\f0\fs20\lang7 Hugo in Action - Summary\par

\pard\sa200\sl276\slmult1\qc\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li720\sa200\sl276\slmult1 Jamstack ist ein Ansatz f\'fcr die Webentwicklung, bei dem die meisten Inhalte zusammen mit dem Thema als Dateien gespeichert und w\'e4hrend der Bereitstellung in die Website kompiliert werden.\par
{\pntext\f1\'B7\tab}Der statische Inhalt in Jamstack wird in einer Auszeichnungssprache geschrieben, die zu HTML kompiliert wird. Die dynamischen Teile sind in Form von APIs verf\'fcgbar, auf die \'fcber JavaScript zugegriffen wird.\par
{\pntext\f1\'B7\tab}Die Jamstack-Architektur bietet massive Einsparungen bei Kosten, Betrieb und Wartung. Au\'dferdem erhalten wir eine schnelle Website.\par
{\pntext\f1\'B7\tab}Hugo ist ein Framework f\'fcr die Erstellung dieser so genannten statischen Websites, die eine hervorragende Erstellungsleistung bieten, und Hugo ist als eine einzelne Bin\'e4rdatei verf\'fcgbar.\par
{\pntext\f1\'B7\tab}Hugo erf\'fcllt das Versprechen eines geringen Wartungsaufwands und einer gro\'dfartigen Entwicklererfahrung, und es ist f\'fcr ein gro\'dfes Team skalierbar.\par
{\pntext\f1\'B7\tab}Hugo eignet sich besonders f\'fcr Websites, bei denen der Informationsfluss vom Server zum Client erfolgt, wie z. B. pers\'f6nliche oder Unternehmens-Websites, News-Posts, Blogs, Dokumentationen und so weiter.\par
{\pntext\f1\'B7\tab}F\'fcr Bereiche, in denen der Informationsfluss vom Client zum Server erfolgt oder auf der Grundlage des Benutzers personalisiert wird, folgt Hugo dem Jamstack-Ansatz. Die JavaScript-Schicht ist f\'fcr die Kommunikation mit den Servern \'fcber eine API zust\'e4ndig\par
{\pntext\f1\'B7\tab}Hugo ist f\'fcr die Installation in den meisten g\'e4ngigen Paketmanagern unter Linux, macOS und Windows verf\'fcgbar.\par
{\pntext\f1\'B7\tab}Hugo verf\'fcgt \'fcber umfangreiche Befehlszeilenfunktionen, um den Arbeitsaufwand f\'fcr seine Benutzer zu minimieren. Es verf\'fcgt \'fcber praktische Optionen, die bei der Erstellung aller Teile einer Website helfen, vom Hinzuf\'fcgen von Modulabh\'e4ngigkeiten bis zur Erstellung neuer Markdown-basierter Dokumente.\par
{\pntext\f1\'B7\tab}Ein Hugo-Projekt besteht aus Ordnern, die \'fcber die Ordner content und themes hinausgehen: static f\'fcr statische Inhalte, data f\'fcr strukturierte Daten, layouts f\'fcr theme overrides, resources f\'fcr Hugos internes Caching, assets f\'fcr Bilder, JavaScript- und CSS-Dateien und public f\'fcr die generierte Ausgabe. Es enth\'e4lt auch Archetypen f\'fcr ver\'f6ffentlichte Vorlagen und eine Konfigurationsdatei f\'fcr globale Einstellungen.\par
{\pntext\f1\'B7\tab}Hugo-Themes k\'f6nnen auf verschiedene Weise hinzugef\'fcgt werden, wobei die einfachste M\'f6glichkeit darin besteht, ein Theme direkt in den Ordner themes zu kopieren. Vor der Verwendung m\'fcssen wir diese mit Standard- und themenspezifischen Parametern und Dateipl\'e4tzen konfigurieren.\par
{\pntext\f1\'B7\tab}Inhalte k\'f6nnen als Markdown, themenspezifische strukturierte Daten oder in einer \'fcberschriebenen HTML-Vorlage hinzugef\'fcgt werden.\par
{\pntext\f1\'B7\tab}Hugo-Websites k\'f6nnen problemlos \'fcber GitHub Pages und Netlify gehostet werden, die eine kontinuierliche Bereitstellung unterst\'fctzen, ohne dass der Entwickler viel Arbeit leisten muss.\par
{\pntext\f1\'B7\tab}Wir k\'f6nnen das Theme wechseln, aber wenn wir viele theme-spezifische Daten verwenden (wie z.B. Daten, die \'fcber Params in der Konfiguration bereitgestellt werden), dann muss diese Arbeit neu gemacht werden. Wir sollten uns fr\'fchzeitig mit dem Wechsel des Themes besch\'e4ftigen, damit wir schnell wechseln k\'f6nnen, wenn das Hugo-Theme nicht mehr verwendet wird.\par
{\pntext\f1\'B7\tab}Wir k\'f6nnen die Lighthouse-Funktion von Google Chrome verwenden, um die Leistung zu messen.  Wir sollten auch ein vollst\'e4ndiges Abh\'e4ngigkeitspr\'fcfungsverfahren durchf\'fchren, um die Wartbarkeit zu \'fcberpr\'fcfen. \par
{\pntext\f1\'B7\tab}Jede Website muss w\'e4hrend der Entwicklung regelm\'e4\'dfig auf Wartbarkeit und Leistung \'fcberpr\'fcft werden, um die Qualit\'e4t sicherzustellen. Hugo bietet eine hervorragende Leistung und hat nur wenige Abh\'e4ngigkeiten, aber die Leistung und Wartbarkeit der Website h\'e4ngen immer noch vom gew\'e4hlten Thema ab.\par
{\pntext\f1\'B7\tab}Markdown verf\'fcgt \'fcber alle Funktionen, die wir f\'fcr die Formatierung normaler Webseiten und Blogbeitr\'e4gen ben\'f6tigen.\par
{\pntext\f1\'B7\tab}Markdown unterst\'fctzt Blockelemente wie \'dcberschriften, verschiedene Arten von Listen und Unterlisten.\par
{\pntext\f1\'B7\tab}Mit textbasierten Konstrukten k\'f6nnen wir Markdown-basierten Inhalten Inline-Bilder, Links, grundlegende Formatierungen und Codebl\'f6cke hinzuf\'fcgen.\par
{\pntext\f1\'B7\tab}GitHub Flavored Markdown (GFM) wird von Hugo unterst\'fctzt, das Markdown um Aufgabenlisten und Tabellen erweitert.\par
{\pntext\f1\'B7\tab}Die Rendering-Engine von Hugo unterst\'fctzt auch Funktionen wie Emoticons, die automatische Berechnung von Br\'fcchen und Definitionslisten.\par
{\pntext\f1\'B7\tab}Hugo unterst\'fctzt mehrere Sprachen f\'fcr Inhalte, darunter AsciiDoc f\'fcr Longform-Inhalte, pandoc f\'fcr erweitertes Markdown und reStructuredText f\'fcr Dokumentation.\par
{\pntext\f1\'B7\tab}Neben den Daten ben\'f6tigt eine Webseite auch Metadaten, die in Hugo \'fcber YAML, TOML und JSON bereitgestellt werden.\par
{\pntext\f1\'B7\tab}YAML ist einfach zu lesen und bietet einen Mechanismus, um strukturierte Daten an Hugo zu liefern.\par
{\pntext\f1\'B7\tab}Hugo hat sinnvolle Vorgaben, und wir k\'f6nnen Webseiten erstellen, ohne ein einziges Metadatenelement zu schreiben. Hugo bietet die M\'f6glichkeit, die meisten Metadatenelemente wie Titel, Beschreibung, Datum und themenspezifische Parameter zu \'fcberschreiben.\par
{\pntext\f1\'B7\tab}Die meisten der Markdown-Funktionen sind in Hugo enthalten und k\'f6nnen in allen Themen verwendet werden. Mit dem Ansatz, Inhalte als Dateien und nicht als Datenbanken zu verwalten, und der Lesbarkeit von Markdown, erhalten wir sinnvolle Vergleichsansichten und Versionsverwaltung f\'fcr Inhalte mit einer Codeversionssoftware wie Git.\par
{\pntext\f1\'B7\tab}Die Indexseiten der Sektionen auf der Website enthalten automatisch eine Zusammenfassung und Titel der Posts in der jeweiligen Sektion. Hugo generiert die zusammenfassenden Informationen automatisch, wenn wir sie nicht bereitstellen. Obwohl die Index-Seiten die h\'e4ufigsten Orte sind, an denen wir die Zusammenfassung eines Beitrags verwenden k\'f6nnen, kann sie auch an anderen Stellen vom Theme verwendet werden. \par
{\pntext\f1\'B7\tab}Hier sind die M\'f6glichkeiten, die Zusammenfassung bereitzustellen:\par

\pard\li720\sa200\sl276\slmult1\b Automatisch \b0 - Standardm\'e4\'dfig \'fcbernimmt Hugo die ersten 70 W\'f6rter des Inhalts als Zusammenfassung f\'fcr das Theme. Die Variable summaryLength in der Konfigurationsdatei der Website steuert die Anzahl der W\'f6rter in der Standardzusammenfassung.\par
\par
\b Manuell \b0 - Wir k\'f6nnen die L\'e4nge der Zusammenfassung mit der Markierung <!--more--> an einer Stelle im Inhalt angeben, um die Zusammenfassung zu k\'fcrzen, falls gew\'fcnscht. \par
Beachten Sie, dass <!--more--> von Hugo wortw\'f6rtlich \'fcbernommen wird. \par
Das Hinzuf\'fcgen von Leerzeichen, der Wechsel zu Gro\'dfbuchstaben oder das Fehlen eines korrekten HTML-Kommentars wird von Hugo nicht verstanden. \par
\par
\b Front matter (Titelblatt ) \b0 - Wir k\'f6nnen die Variable "summary" im Titelblatt verwenden, um den Zusammenfassungstext zu liefern.\par

\pard\sa200\sl276\slmult1\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li720\sa200\sl276\slmult1 Beachten Sie, dass sich die Variable "summary" von der Variable " description" unterscheidet. \par
{\pntext\f1\'B7\tab}Die Summary-Variable w\'e4hrend sich die Description-Variable eher auf den Inhalt bezieht, der an Suchmaschinen gesendet wird. \par
{\pntext\f1\'B7\tab}Das Beschreibungsfeld kann nur \'fcber das Front matter angegeben werden und hat keinen automatischen Wert, der auf dem Inhalt basiert! \par
{\pntext\f1\'B7\tab}Einige Themes r\'e4umen der "Description" eine h\'f6here Priorit\'e4t ein und greifen in den Indexseiten auf die "Summary" zur\'fcck.\par
{\pntext\f1\'B7\tab}Hugo bietet die Flexibilit\'e4t, globale Konfigurationsvariablen au\'dfer Kraft zu setzen und sie \'fcber mehrere Dateien und in verschiedenen Umgebungen zu verwalten. Indem wir die Konfiguration von einer einzelnen Datei in einen Ordner verschieben, k\'f6nnen wir Optionen auf der Grundlage zahlreicher Bedingungen ausw\'e4hlen.\par
{\pntext\f1\'B7\tab}Wir k\'f6nnen Webseiten in Hugo in Sektionen organisieren, indem wir den entsprechenden Markup-Inhalt in Ordnern ablegen. Diese Abschnitte k\'f6nnen verschachtelt werden und entsprechen in der Regel dem URL-Schema f\'fcr die Website.\par
{\pntext\f1\'B7\tab}Wir k\'f6nnen die Inhalte \'fcber Indexseiten verschiedener Abschnitte zug\'e4nglich machen und diese Seiten zu Menus hinzuf\'fcgen.\par
{\pntext\f1\'B7\tab}Um die Portabilit\'e4t von Inhalten \'fcber verschiedene Websites hinweg zu erm\'f6glichen, bietet Hugo die M\'f6glichkeit, in sich geschlossene und isolierte Daten zu haben. Wir k\'f6nnen diese Isolierung erreichen, indem wir die Men\'fceintr\'e4ge im Front Matter platzieren und Seitenb\'fcndel (page bundles) verwenden.\par

\pard\sa200\sl276\slmult1\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li720\sa200\sl276\slmult1 Hugo bietet die Flexibilit\'e4t, globale Konfigurationsvariablen au\'dfer Kraft zu setzen und sie \'fcber mehrere Dateien und in verschiedenen Umgebungen zu verwalten. Indem wir die Konfiguration von einer einzelnen Datei in einen Ordner verschieben, k\'f6nnen wir Optionen auf der Grundlage zahlreicher Bedingungen ausw\'e4hlen.\par
{\pntext\f1\'B7\tab}Wir k\'f6nnen Webseiten in Hugo in Sektionen organisieren, indem wir den entsprechenden Markup-Inhalt in Ordnern ablegen. Diese Abschnitte k\'f6nnen verschachtelt werden und entsprechen in der Regel dem URL-Schema f\'fcr die Website.\par
{\pntext\f1\'B7\tab}Wir k\'f6nnen die Inhalte \'fcber Indexseiten verschiedener Abschnitte zug\'e4nglich machen und diese Seiten zu Menus hinzuf\'fcgen.\par
{\pntext\f1\'B7\tab}Um die Portabilit\'e4t von Inhalten \'fcber verschiedene Websites hinweg zu erm\'f6glichen, bietet Hugo die M\'f6glichkeit, in sich geschlossene und isolierte Daten zu haben. \par
{\pntext\f1\'B7\tab}Wir k\'f6nnen diese Isolierung erreichen, indem wir die Men\'fceintr\'e4ge im Front Matter platzieren und Seitenb\'fcndel (page bundles) verwenden.\par
{\pntext\f1\'B7\tab}Mit Blatt (leaf)- und Zweigb\'fcndeln (branch)-B\'fcndeln halten wir alle Bestandteile (assets) n\'e4her am Inhalt. \par
{\pntext\f1\'B7\tab}Wir k\'f6nnen seitenbezogene Bilder und Dateien im selben Ordner b\'fcndeln wie den Markup-Inhalt f\'fcr die Seite.\par
{\pntext\f1\'B7\tab}Hugo bietet die M\'f6glichkeit, den Inhalt mit Hilfe von Taxonomien auf beliebige Weise logisch zu organisieren. \par
{\pntext\f1\'B7\tab}Jede Taxonomie besteht aus Begriffen, und eine Seite kann in mehreren Taxonomien vorhanden sein und zahlreiche Begriffe haben. \par
{\pntext\f1\'B7\tab}Taxonomien erstellen Listenseiten und bieten Unterst\'fctzung f\'fcr Many-to-Many-Zuordnungen zwischen Seiten und Taxonomiebegriffen. \par
{\pntext\f1\'B7\tab}Wir k\'f6nnen so viele Taxonomien wie n\'f6tig definieren.\par
{\pntext\f1\'B7\tab}Shortcodes sind ein Mittel, um Snippets bereitzustellen, mit denen wir Markdown um neue Funktionen erweitern k\'f6nnen. \par
{\pntext\f1\'B7\tab}Hugo wird bereits mit Shortcodes f\'fcr verschiedene Anwendungsf\'e4lle ausgeliefert, von YouTube-Videos bis zur Syntaxhervorhebung.\par
{\pntext\f1\'B7\tab}Wir k\'f6nnen benutzerdefinierte Shortcodes sowohl im Markup- als auch im HTML-Format und in Verbindung mit dem Inhalt definieren, um zu verhindern, dass die Rendering-Logik kopiert und eingef\'fcgt werden muss.\par
{\pntext\f1\'B7\tab}Die Go Template-Sprache bietet vollst\'e4ndige Unterst\'fctzung f\'fcr Variablen, Funktionen, Bedingungen und Schleifen.\par
{\pntext\f1\'B7\tab}Wir k\'f6nnen Variablen verwenden, um auf die Metadaten der Website und der Seiten zuzugreifen, einschlie\'dflich Informationen wie Men\'fcs und alle Seiten der Website.\par
{\pntext\f1\'B7\tab}Hugo kann strukturierte Metadaten sowohl aus dem Front Matter als auch aus Dateien auf der Festplatte abrufen. \par
{\pntext\f1\'B7\tab}Strukturierte Daten erm\'f6glichen eine einfachere Verwendung von einzelnen Werten als Variablen.\par
{\pntext\f1\'B7\tab}Wir k\'f6nnen die Go-Template-Sprache in Shortcodes programmatisch verwenden, um neue Funktionen f\'fcr Markdown zu erstellen.\par
{\pntext\f1\'B7\tab}Archetypen sind Vorlagen f\'fcr die Inhaltsdateien, die verwendet werden k\'f6nnen, um bestimmte Felder des Front Matter vorzubelegen, die richtige Ordnerstruktur zu erstellen und Platzhalter f\'fcr Content-Ersteller bereitzustellen.\par
{\pntext\f1\'B7\tab}Inhaltstypen in Hugo bieten die M\'f6glichkeit, verschiedene, potenziell unabh\'e4ngige Vorlagen f\'fcr verschiedene Arten von Inhalten zu schreiben. Hugo ordnet den Abschnittsnamen des Branch-Bundles automatisch dem Inhaltstyp zu.\par
{\pntext\f1\'B7\tab}Wir k\'f6nnen die Basisvorlage und Codebl\'f6cke in Hugo verwenden, um gemeinsame Schnipsel der Go Template-Sprache \'fcber einen Vererbungsmechanismus zu teilen. \par
{\pntext\f1\'B7\tab}Das Basis-Template bietet Standard-Code-Schnipsel, die in den spezifischen Templates \'fcberschrieben werden k\'f6nnen.\par
{\pntext\f1\'B7\tab}Die Partials in Hugo bieten eine M\'f6glichkeit, einen gemeinsam genutzten Codeschnipsel in einer unabh\'e4ngigen Datei zu kapseln. F\'fcr eine schnellere Ausf\'fchrung k\'f6nnen Partials zwischengespeichert werden.\par
{\pntext\f1\'B7\tab}Partials fungieren auch als Funktionen, die Werte an den Aufrufer zur\'fcckgeben k\'f6nnen. \par
{\pntext\f1\'B7\tab}Mit Hugo Pipes k\'f6nnen wir textuelle und nicht textuelle Assets mit einer Reihe von Filtern verarbeiten.\par
{\pntext\f1\'B7\tab}Wir k\'f6nnen Go Template Code in jedem textbasierten Dateiformat von CSS und JavaScript bis SVG schreiben.\par
{\pntext\f1\'B7\tab}Hugo bietet eine Vielzahl von Bildbearbeitungsfunktionen zur Gr\'f6\'dfen\'e4nderung und Filterung.\par
{\pntext\f1\'B7\tab}Wir k\'f6nnen benutzerdefinierten Code schreiben, um zu steuern, wie Hugo die Elemente des Markdown-Dokumentes rendert.\par
{\pntext\f1\'B7\tab}Hugo wird mit vielen wieder verwendbaren Vorlagen geliefert, die wir mit nur einer Zeile Code zu einer Website hinzuf\'fcgen k\'f6nnen.\par
{\pntext\f1\'B7\tab}Wir k\'f6nnen Layouts verwenden, um verschiedene Inhalte innerhalb desselben Inhaltstyps anzuordnen.\par
{\pntext\f1\'B7\tab}Die Cascade-Option in der Front Matter erm\'f6glicht es uns, die Front Matter-Eigenschaften mit allen Seiten in einem Branch-Bundle zu teilen.\par
{\pntext\f1\'B7\tab}Die Vorlagen single.html und list.html sind f\'fcr die Vervollst\'e4ndigung eines Hugo-Themes unerl\'e4sslich. \par
{\pntext\f1\'B7\tab}Sie entsprechen den Blattb\'fcndeln (oder einzelnen Seiten) bzw. den Zweigb\'fcndeln.\par
{\pntext\f1\'B7\tab}Die Dateien index.html, taxonomy.html und terms.html werden standardm\'e4\'dfig durch list.html ersetzt, wenn eine dieser Dateien nicht vorhanden ist.\par
{\pntext\f1\'B7\tab}Die Dateien taxonomy.html und terms.html erm\'f6glichen eine feink\'f6rnige Kontrolle \'fcber die Webseiten-Taxonomie.\par
{\pntext\f1\'B7\tab}Ein Hugo-Theme ist eine Sammlung von Vorlagen, Shortcodes, Assets und anderen Ressourcen zur Darstellung einer Website, die im Content-Ordner bereitgestellt werden.\par
{\pntext\f1\'B7\tab}Als Template-Autoren sollten wir darauf abzielen, ein Template zu erstellen, das mit einem beliebigen Inhaltsordner gerendert werden kann. \par
{\pntext\f1\'B7\tab}Alle Funktionen sollten opt-in sein und sinnvolle Standardeinstellungen bieten.\par
{\pntext\f1\'B7\tab}Inhaltsansichten sind Subtemplates, die in einer anderen Vorlage gerendert werden. Sie dienen als flexiblerer Ersatz f\'fcr Teilvorlagen (partials), die Content-Typen au\'dfer Kraft setzen.\par
{\pntext\f1\'B7\tab}Hugo "Modules" ist eine leistungsf\'e4hige Methode zur Verwaltung von Abh\'e4ngigkeiten. \par
{\pntext\f1\'B7\tab}Wir k\'f6nnen jeden beliebigen Ordner in einem beliebigen Git-Repository an einer beliebigen Stelle in unserem Projekt einbinden, selbst wenn das Quell-Repository nichts \'fcber Hugo oder Hugo Modules wei\'df.\par
{\pntext\f1\'B7\tab}Hugo bietet die M\'f6glichkeit, Abh\'e4ngigkeiten auf jede gew\'fcnschte Weise zu verwalten. \par
{\pntext\f1\'B7\tab}Wir k\'f6nnen Abh\'e4ngigkeiten im Vendor-Ordner aufbewahren, sie spontan \'fcber einen Link herunterladen oder eine lokale Kopie auf der Festplatte haben.\par
{\pntext\f1\'B7\tab}Mit Hugo Modules k\'f6nnen wir Themes, Template-Plugins und Content-Plugins erstellen.\par
{\pntext\f1\'B7\tab}Diese Plugins k\'f6nnen an einem beliebigen Ort in einem Hugo-Repository eingebunden werden und haben Zugriff auf die gesamte Vorlagensprache. \par
{\pntext\f1\'B7\tab}Wir k\'f6nnen bestimmte Dateien in einem Plugin \'fcberschreiben, um sie anzupassen.\par
{\pntext\f1\'B7\tab}Module k\'f6nnen von anderen Modulen abh\'e4ngen, und wir k\'f6nnen entscheiden, ob wir die Abh\'e4ngigkeiten direkt nutzen wollen.\par
{\pntext\f1\'B7\tab}Hugo macht es einfach, ein Modul zu de-duplizieren und eine Kopie davon zu haben.\par
{\pntext\f1\'B7\tab}Jamstack bietet die M\'f6glichkeit, bereits bei der Kompilierung der Website auf APIs zuzugreifen, so dass die Seiten im Voraus erstellt werden k\'f6nnen, ohne dass zur Laufzeit ein Leistungs-Overhead entsteht und Nutzungsinformationen an Dritte weitergegeben werden.\par
{\pntext\f1\'B7\tab}Mit der Funktion "getJSON" erm\'f6glicht Hugo den Zugang zu jeder API \'fcber HTTP. \par
{\pntext\f1\'B7\tab}Die meisten beliebten Websites verf\'fcgen \'fcber eine JSON-basierte API, die wir verwenden k\'f6nnen, um Inhalte zu erhalten, die wir in eine Hugo-Seite einbetten k\'f6nnen.\par
{\pntext\f1\'B7\tab}Wir k\'f6nnen Webformulare in Hugo erstellen und dann einen Formulardienst wie Netlify Forms oder Formspree verwenden, um die Formulardaten an einen Dienst eines Drittanbieters zu senden, der sich um die allt\'e4glichen Abl\'e4ufe eines Formular-Backends k\'fcmmert.\par
{\pntext\f1\'B7\tab}Die Generierung von Formularen auf der Grundlage von Markup und Metadaten bietet den Autoren von Inhalten eine gro\'dfe Flexibilit\'e4t, da Formulare im Handumdrehen und ohne das Schreiben von Servercode oder HTML generiert werden.\par
{\pntext\f1\'B7\tab}Wir k\'f6nnen Formular\'fcbermittlungen mit APIs kombinieren, um ein dynamisches System aufzubauen, das sich aus nutzergenerierten Inhalten speisen kann.\par
{\pntext\f1\'B7\tab}Mithilfe der Ausgabeformate in Hugo k\'f6nnen wir unsere eigenen Pseudo-APIs erstellen, die Daten in jedem gew\'fcnschten Dateiformat bereitstellen k\'f6nnen. \par
{\pntext\f1\'B7\tab}W\'e4hrend diese APIs nicht auf Benutzereingaben reagieren k\'f6nnen, k\'f6nnen wir Anwendungen erstellen, von mobilen Websites bis hin zu Single-Page Anwendungen (SPAs).\par
{\pntext\f1\'B7\tab}JavaScript ist eine der drei S\'e4ulen des Jamstack, und zwar aus einem einfachen Grund: Der Browser reserviert einige Webfunktionen, die nur f\'fcr die Client-seitige JavaScript-Sprache verf\'fcgbar sind.\par
{\pntext\f1\'B7\tab}Hugo hat eine einzigartige Pipeline aufgebaut, um mit dem JavaScript-\'d6kosystem zusammenzuarbeiten, und unternimmt gro\'dfe Anstrengungen, um sicherzustellen, dass wir mit unserem JavaScript-Code den vollen Funktionsumfang erreichen k\'f6nnen, den wir uns w\'fcnschen.\par
{\pntext\f1\'B7\tab}Bei der Entwicklung der JavaScript-Integration hat das Hugo-Team seine Leistungsziele verst\'e4rkt und sichergestellt, dass Hugo einer der schnellsten JavaScript-Builder mit voller Unterst\'fctzung f\'fcr die Interaktion mit dem Node Package Manager (npm) und dem gesamten JavaScript/TypeScript-\'d6kosystem ist.\par
{\pntext\f1\'B7\tab}Wir k\'f6nnen JavaScript verwenden, um Teile einer Webseite neu zu laden und Formulare dynamisch an eine Website zu \'fcbermitteln.\par
{\pntext\f1\'B7\tab}JavaScript kann Berechnungen auf dem Client durchf\'fchren und bietet billigere, schnellere und leichter zu wartende Versionen von bisher servergebundenen Funktionen wie der Suche.\par
{\pntext\f1\'B7\tab}Wir k\'f6nnen eine entkoppelte Single-Page-Anwendung (SPA) in einer Hugo-Website aufbauen und haben eine gute Aufgabenteilung, bei der JavaScript f\'fcr die interaktiven Teile zust\'e4ndig ist. \par
{\pntext\f1\'B7\tab}Gleichzeitig konzentriert sich Hugo auf die inhaltsbasierten Teile der gesamten webbasierten L\'f6sung.\par
{\pntext\f1\'B7\tab}Es gibt immer einen Kompromiss, den wir eingehen m\'fcssen, wenn wir zwischen einer API eines Drittanbieters und der Entwicklung einer eigenen API w\'e4hlen. \par
{\pntext\f1\'B7\tab}Von der zus\'e4tzlichen Arbeit bis zur laufenden Wartung ist mehr zu tun, wenn wir benutzerdefinierte APIs erstellen. \par
{\pntext\f1\'B7\tab}Dennoch haben wir die M\'f6glichkeit, den Funktionsumfang oder den Preis zu kontrollieren, und wir k\'f6nnen nicht sicher sein, dass das Unternehmen sein Gesch\'e4ftsmodell nicht \'e4ndert oder au\'dferhalb unserer Kontrolle den Betrieb einstellt.\par
{\pntext\f1\'B7\tab}F\'fcr den Fall, dass wir eine benutzerdefinierte API erstellen m\'fcssen, schl\'e4gt Jamstack vor, ein Function as a Service (FaaS)-Modell oder ein Platform as a Service (PaaS)-Modell zu verwenden, um unseren t\'e4glichen Wartungsaufwand gering zu halten.\par
{\pntext\f1\'B7\tab}Netlify bietet Netlify Functions als FaaS-L\'f6sung an, mit der wir die Verarbeitung anpassen k\'f6nnen, z. B. die Umwandlung von LaTeX-Text in SVG.\par
{\pntext\f1\'B7\tab}Wir k\'f6nnen einen PaaS-Anbieter wie Heroku verwenden, wenn wir eine unabh\'e4ngige L\'f6sung f\'fcr unsere API-Hosting-Anforderungen suchen.\par
{\pntext\f1\'B7\tab}Hugo kann die APIs von Erstanbietern auf die gleiche Weise nutzen wie die APIs von Drittanbietern, und zwar sowohl zur Erstellungszeit als auch zur Laufzeit. \par
{\pntext\f1\'B7\tab}Wir k\'f6nnen APIs in Partials oder Shortcodes verpacken, die sich wie Plugins f\'fcr Hugo verhalten k\'f6nnen, mit zus\'e4tzlichen Sicherheitsvorkehrungen, da sie in einem externen Dienst laufen.\par
{\pntext\f1\'B7\tab}Webhooks sind das Mittel f\'fcr die Kommunikation von Dienst zu Dienst. \par
{\pntext\f1\'B7\tab}Wir k\'f6nnen Webhooks in den meisten Jamstack-Diensten konfigurieren, um Daten zu \'fcbertragen.\par
{\pntext\f1\'B7\tab}Viele Dienste von GitHub bis Netlify k\'f6nnen Webhooks direkt nutzen. \par
{\pntext\f1\'B7\tab}Wir k\'f6nnen auch eigene Handler schreiben, um auf einen Webhook zu reagieren.\par
{\pntext\f1\'B7\tab}Jamstack-basierte Websites k\'f6nnen mit einem Webhook neu aufgebaut werden, was uns das Beste aus beiden Welten bietet: Reaktion auf Benutzerfeedback auf der Website und wartungsarmes, hochleistungsf\'e4higes CDN-basiertes Hosting.\par
{\pntext\f1\'B7\tab}Obwohl Aktionen wie der Rebuild Zeit in Anspruch nehmen, k\'f6nnen wir einige Vorverarbeitungen und das Rendering in JavaScript durchf\'fchren, um dem Benutzer eine sofortige Befriedigung f\'fcr einen Aufwand zu bieten, der einige Zeit in Anspruch nehmen k\'f6nnte.\par
{\pntext\f1\'B7\tab}Wir k\'f6nnen Hugo in verschiedenen Kontexten au\'dferhalb eines normalen Blogs oder einer Website verwenden. \par
{\pntext\f1\'B7\tab}Dazu geh\'f6ren Portfolios, Medien- oder Bildungswebsites.\par
{\pntext\f1\'B7\tab}In einer E-Commerce-Anwendung spiegeln die einzelnen Seiten die Produktdetails wider, und die Listenseiten k\'f6nnen die Produktlisten darstellen.\par
{\pntext\f1\'B7\tab}Die JavaScript-Ebene von Jamstack in Verbindung mit dem localStorage des Browsers bietet die M\'f6glichkeit, die Website anzupassen und zu personalisieren. \par
{\pntext\f1\'B7\tab}Mithilfe dieser Ebene k\'f6nnen wir auch benutzerspezifische Daten speichern (z. B. einen Einkaufswagen) und benutzerspezifische Seiten bereitstellen.\par
{\pntext\f1\'B7\tab}APIs von Drittanbietern sind in einem entwicklerfreundlichen Format f\'fcr komplexe Aufgaben wie die Zahlungsverwaltung oder den E-Mail-Versand verf\'fcgbar. \par
{\pntext\f1\'B7\tab}Diese bieten fortgeschrittene Funktionen in einer entwicklerfreundlichen L\'f6sung, die aus dem Regal geholt und wiederverwendet werden kann.\par
{\pntext\f1\'B7\tab}Hugo bietet eine Reihe von fortgeschrittenen Funktionen zur Erstellung mehrerer Versionen einer Webseite. \par
{\pntext\f1\'B7\tab}Dazu geh\'f6ren mehrsprachige Websites und benutzerdefinierte Ausgabeformate.\par
{\pntext\f1\'B7\tab}Hugo unterst\'fctzt die Erstellung von Websites in mehreren (menschlichen) Sprachen, wobei wir sprachspezifische Inhalte bereitstellen k\'f6nnen, ohne notwendigerweise alle Einstellungen und Bilder f\'fcr die Website neu zu erstellen.\par
{\pntext\f1\'B7\tab}Mit benutzerdefinierten Ausgabeformaten k\'f6nnen wir verschiedene Layouts und Vorlagen f\'fcr denselben Inhalt entwerfen, um ihn auf unterschiedliche Weise zu pr\'e4sentieren, einschlie\'dflich verschiedener Mime-Typen wie RSS oder JSON bis hin zu verschiedenen Arten von Benutzeroberfl\'e4chen wie AMP oder einfachem HTML.\par
{\pntext\f1\'B7\tab}Hugo bietet Sitemap- und robots.txt-Vorlagen, die wir optional verwenden k\'f6nnen. \par
{\pntext\f1\'B7\tab}Mit gro\'dfartigen Voreinstellungen und einfachen Anforderungen besteht kaum die Notwendigkeit, diese einzurichten.\par
{\pntext\f1\'B7\tab}Obwohl Hugo-basierte Websites standardm\'e4\'dfig schnell sind, k\'f6nnen wir sie mit Techniken wie "Instant Page" oder "Turbo" noch schneller machen, um die M\'f6glichkeiten des modernen Webs zu nutzen.\par
{\pntext\f1\'B7\tab}Mit der Befehlszeilenschnittstelle und den Konfigurationsdateien ist Jamstack sehr benutzerfreundlich f\'fcr den Entwickler.\par
{\pntext\f1\'B7\tab}Ab einem bestimmten Punkt wird es einfacher, die Konfiguration f\'fcr die verschiedenen Dienste und den Quellcode zu verwalten.\par
}
 